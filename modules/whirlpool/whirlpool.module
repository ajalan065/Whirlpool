<?php

/**
 * @file
 * Provides Slideshow style options for Views.
 */

define('WHIRLPOOL_MODULE_PATH', drupal_get_path('module', 'whirlpool'));

/**
 * Implement hooks_views_api().
 */
function whirlpool_views_api() {
  return array(
      'api' => '3.0',
      'path' => WHIRLPOOL_MODULE_PATH,
    );
}

/**
 * Implements hook_help().
 */
function whirlpool_help($path, $arg) {
  switch ($path) {
    case 'admin/help#whirlpoolhelp':
      return '<p>Check the README.txt to sort things out.</p>';
  }
}

/**
 * Implements hook_library().
 */
function whirlpool_library() {
  $libraries = array();
  $libraries['whirlpoollib'] = array(
    'title' => 'Whirlpool',
    'version' => '1.0',
  );
  return $libraries;
}

/**
 * Preprocess the primary theme implementation for a view.
 */
function template_preprocess_views_whirlpool(&$vars) {
  drupal_add_js('sites/all/libraries/whirlpoollib/js/jquery.freeow.min.js');
  drupal_add_js('sites/all/libraries/whirlpoollib/js/jquery.vortex.js');
  drupal_add_css(('sites/all/libraries/whirlpoollib/css/freeow/freeow.css'), array('type' => 'external'));
  drupal_add_css(('sites/all/libraries/whirlpoollib/css/site.css'), array('type' => 'external'));
  drupal_add_js(WHIRLPOOL_MODULE_PATH . '/js/whirl.js', 'external');
  drupal_add_css((WHIRLPOOL_MODULE_PATH . '/css/whirl.css'), array('type' => 'external'));
}

/**
 * Implements hook_field_formatter_info().
 */
function whirlpool_field_formatter_info() {
  return array(
    'whirlpool_formatter' => array(
      'label' => t('Whirlpool'),
      'field types' => array('image'),
    ),
  );
}

/**
 * Implement hook_field_formatter_view().
 */
function whirlpool_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $img_path = array();
  foreach ($items as $key => $val) {
    $uri = $val['uri'];
    $img_path[$key] = file_create_url($uri);
  }
  $element = array(
    '#theme' => 'whirlpool_format',
    '#item' => $items,
  );
  // Calls whirlpool_get_library_path().
  $element['#attached']['js'][] = whirlpool_get_library_path_js();
  $element['#attached']['css'][]= whirlpool_get_library_path_css();
  $element['#attached']['js'][] = WHIRLPOOL_MODULE_PATH . '/js/whirl.js';
  $element['#attached']['css'][] = WHIRLPOOL_MODULE_PATH . '/css/whirl.css';
  return $element;
}

/**
 * Implements hook_theme().
 */
function whirlpool_theme($existing, $type, $theme, $path) {
  return array(
    'whirlpool' => array(
      'variables' => array('items' => NULL),
      'template' => 'whirlpool-field',
    ),
    'whirlpool_format' => array(
      'variables' => array('item' => NULL),
    ),
  );
}

/*
 * Checks for the library path, else assigns the conventional path.
 */
function whirlpool_get_library_path_js() {
  if (module_exists('libraries') && function_exists('libraries_get_path')) {
    return libraries_get_path('whirlpoollib') . '/js';
  }
}
function whirlpool_get_library_path_css() {
  if (module_exists('libraries') && function_exists('libraries_get_path')) {
    return libraries_get_path('whirlpoollib') . '/css';
  }
}

/**
 * Implements hook_field_formatter_format().
 */
function theme_whirlpool_format($variables) {
  $images = array();
  foreach ($variables['item'] as $item) {
    $image = array(
      'path' => $item['uri'],
    );
    if (isset($item['alt'])) {
      $image['alt'] = $item['alt'];
    }

    if (isset($item['attributes'])) {
      $image['attributes'] = $item['attributes'];
    }

    if (isset($item['width']) && isset($item['height'])) {
      $image['width'] = $item['width'];
      $image['height'] = $item['height'];
    }

    // Do not output an empty 'title' attribute.
    if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
      $image['title'] = $item['title'];
    }
    $images[] = theme('image', $image);
  }
  $output = theme('whirlpool', array('items' => $images));
  return $output;
}
